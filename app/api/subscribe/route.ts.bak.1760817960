import { NextResponse } from "next/server";
import { prisma } from "../../../lib/db";

export async function POST(req: Request) {
  try {
    const form = await req.formData();
    const raw = String(form.get("email") || "");
    const email = raw.trim().toLowerCase();

    if (!/^\S+@\S+\.\S+$/.test(email)) {
      return NextResponse.json({ ok: false, error: "Invalid email" }, { status: 400 });
    }

    await prisma.subscriber.upsert({
      where: { email },
      update: {},
      create: { email, source: "coming-soon" },
    });

    // Optional: try Resend; silently continue if not ready
    const apiKey = process.env.RESEND_API_KEY;
    const from = process.env.RESEND_FROM || "noreply@mynewinfinityai.com";
    if (apiKey) {
      try {
        const res = await fetch("https://api.resend.com/emails", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${apiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            from,
            to: email,
            subject: "You're on the Infinity AI list",
            html: "<p>Thanks for your interest! Weâ€™ll notify you at launch.</p>",
          }),
        });
        if (!res.ok) {
          const j = await res.json().catch(() => ({}));
          if (res.status === 403) {
            console.warn("[subscribe] Resend 403 (domain not verified). Continuing without email send.", j);
          } else {
            console.error("[subscribe] Resend error:", res.status, j);
          }
        }
      } catch (err) {
        console.error("[subscribe] Resend request failed:", err);
      }
    } else {
      console.warn("[subscribe] RESEND_API_KEY not set; skipping email send.");
    }

    return NextResponse.redirect(new URL("/", req.url), { status: 303 });
  } catch (e) {
    console.error(e);
    return NextResponse.json({ ok: false }, { status: 500 });
  }
}
