// app/api/subscribe/route.ts
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

function normalizeEmail(v: unknown) {
  return String(v || '').trim().toLowerCase();
}

export async function POST(req: Request) {
  const ct = req.headers.get('content-type') || '';
  let email = '';

  try {
    if (ct.includes('application/json')) {
      const body = await req.json();
      email = normalizeEmail(body?.email);
    } else if (ct.includes('multipart/form-data') || ct.includes('application/x-www-form-urlencoded')) {
      const form = await req.formData();
      email = normalizeEmail(form.get('email'));
    } else {
      try {
        const body = await req.json();
        email = normalizeEmail(body?.email);
      } catch {
        return NextResponse.json({ error: 'Unsupported Content-Type' }, { status: 415 });
      }
    }

    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return NextResponse.json({ error: 'Invalid email' }, { status: 400 });
    }

    const subscriber = await prisma.subscriber.upsert({
      where: { email },
      update: {},
      create: { email },
    });

    return NextResponse.json({ ok: true, subscriber }, { status: 201 });
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: String(e?.message || e) }, { status: 500 });
  }
}

export function GET() {
  return NextResponse.json({ error: 'Method Not Allowed' }, { status: 405 });
}
